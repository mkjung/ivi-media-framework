buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.3.1'
        classpath 'org.ajoberstar:gradle-git:1.3.2'
        classpath 'com.github.dcendents:android-maven-plugin:1.2'
    }
}

apply plugin: 'maven'
apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 24
    buildToolsVersion '24.0.1'

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 23
        versionCode project.VERSION_CODE.toInteger()
        versionName project.VERSION_NAME
    }

    sourceSets {
    main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
    }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    // Make per-variant version code
    libraryVariants.all { variant ->
        def manifestParser = new com.android.builder.core.DefaultManifestParser()
        // get the version code
        def frameworkVersion = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
        //Custom AAR name
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "ivi-media-framework-${frameworkVersion}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}


dependencies {
    compile 'io.github.mkjung:vlc-android-sdk-ivi:0.0.1'
}

allprojects {
    version = VERSION_NAME
    group = GROUP

    repositories {
        mavenCentral()
    }
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging project.POM_PACKAGING
                name project.POM_NAME
                description project.POM_DESCRIPTION
                url project.POM_URL

                licenses {
                    license {
                        name project.POM_LICENCE_NAME
                        url project.POM_LICENCE_URL
                        distribution project.POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id project.POM_DEVELOPER_ID
                        name project.POM_DEVELOPER_NAME
                    }
                }
                scm {
                    connection project.POM_SCM_CONNECTION
                    developerConnection project.POM_SCM_DEV_CONNECTION
                    url project.POM_SCM_URL
                }
            }
        }
    }
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

