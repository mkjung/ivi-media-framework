apply plugin: 'com.android.library'
apply plugin: 'maven'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    dataBinding {
        enabled = true
    }
    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 24
        versionCode project.VERSION_CODE.toInteger()
        versionName project.VERSION_NAME
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            manifest.srcFile 'src/main/AndroidManifest.xml'
            java.srcDirs = ['src/main/java']
        }
    }
    libraryVariants.all { variant ->
        def manifestParser = new com.android.builder.core.DefaultManifestParser()
        // get the version code
        def frameworkVersion = manifestParser.getVersionName(android.sourceSets.main.manifest.srcFile)
        //Custom AAR name
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.aar')) {
                def fileName = "ivi-media-framework-${frameworkVersion}.aar"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile project(':axmlrpc')
    compile 'com.android.support:appcompat-v7:24.1.1'
    compile 'com.android.support:design:24.1.1'
    compile 'com.android.support:preference-v7:24.1.1'
    compile 'com.android.support:leanback-v17:24.1.1'
    compile 'io.github.mkjung:vlc-android-sdk-ivi:0.0.1'
    testCompile 'junit:junit:4.12'
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
